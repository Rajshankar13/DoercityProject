[
{"page": "https://www.tutorialspoint.com/dbms/index.htm", "content": "Database Management System or DBMS in short refers to the technology of storing and retrieving users\u2019 data with utmost efficiency along with appropriate security measures. This tutorial explains the basics of DBMS such as its architecture, data models, data schemas, data independence, E-R model, relation model, relational database design, and storage and file structure and much more."},
{"page": "https://www.tutorialspoint.com/dbms/index.htm", "content": "This tutorial will especially help computer science graduates in understanding the basic-to-advanced concepts related to Database Management Systems."},
{"page": "https://www.tutorialspoint.com/dbms/index.htm", "content": "Before you start proceeding with this tutorial, it is recommended that you have a good understanding of basic computer concepts such as primary memory, secondary memory, and data structures and algorithms."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_overview.htm", "content": " is a collection of related data and data is a collection of facts and figures that can be processed to produce information."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_overview.htm", "content": "Mostly data represents recordable facts. Data aids in producing information, which is based on facts. For example, if we have data about marks obtained by all students, we can then conclude about toppers and average marks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_overview.htm", "content": "A "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_overview.htm", "content": "Traditionally, data was organized in file formats. DBMS was a new concept then, and all the research was done to make it overcome the deficiencies in traditional style of data management. A modern DBMS has the following characteristics \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_overview.htm", "content": "A typical DBMS has users with different rights and permissions who use it for different purposes. Some users retrieve data and some back it up. The users of a DBMS can be broadly categorized as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_architecture.htm", "content": "The design of a DBMS depends on its architecture. It can be centralized or decentralized or hierarchical. The architecture of a DBMS can be seen as either single tier or multi-tier. An n-tier architecture divides the whole system into related but independent "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_architecture.htm", "content": "In 1-tier architecture, the DBMS is the only entity where the user directly sits on the DBMS and uses it. Any changes done here will directly be done on the DBMS itself. It does not provide handy tools for end-users. Database designers and programmers normally prefer to use single-tier architecture."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_architecture.htm", "content": "If the architecture of DBMS is 2-tier, then it must have an application through which the DBMS can be accessed. Programmers use 2-tier architecture where they access the DBMS by means of an application. Here the application tier is entirely independent of the database in terms of operation, design, and programming."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_architecture.htm", "content": "A 3-tier architecture separates its tiers from each other based on the complexity of the users and how they use the data present in the database. It is the most widely used architecture to design a DBMS."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_architecture.htm", "content": "Multiple-tier database architecture is highly modifiable, as almost all its components are independent and can be changed independently."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "Data models define how the logical structure of a database is modeled. Data Models are fundamental entities to introduce abstraction in a DBMS. Data models define how data is connected to each other and how they are processed and stored inside the system."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "The very first data model could be flat data-models, where all the data used are to be kept in the same plane. Earlier data models were not so scientific, hence they were prone to introduce lots of duplication and update anomalies."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "Entity-Relationship (ER) Model is based on the notion of real-world entities and relationships among them. While formulating real-world scenario into the database model, the ER Model creates entity set, relationship set, general attributes and constraints."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "ER Model is best used for the conceptual design of a database."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "ER Model is based on \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "These concepts are explained below."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "The most popular data model in DBMS is the Relational Model. It is more scientific a model than others. This model is based on first-order predicate logic and defines a table as an "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_models.htm", "content": "The main highlights of this model are \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_schemas.htm", "content": "A database schema is the skeleton structure that represents the logical view of the entire database. It defines how the data is organized and how the relations among them are associated. It formulates all the constraints that are to be applied on the data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_schemas.htm", "content": "A database schema defines its entities and the relationship among them. It contains a descriptive detail of the database, which can be depicted by means of schema diagrams. It\u2019s the database designers who design the schema to help programmers understand the database and make it useful."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_schemas.htm", "content": "A database schema can be divided broadly into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_schemas.htm", "content": "It is important that we distinguish these two terms individually. Database schema is the skeleton of database. It is designed when the database doesn't exist at all. Once the database is operational, it is very difficult to make any changes to it. A database schema does not contain any data or information."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_schemas.htm", "content": "A database instance is a state of operational database with data at any given time. It contains a snapshot of the database. Database instances tend to change with time. A DBMS ensures that its every instance (state) is in a valid state, by diligently following all the validations, constraints, and conditions that the database designers have imposed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "If a database system is not multi-layered, then it becomes difficult to make any changes in the database system. Database systems are designed in multi-layers as we learnt earlier."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "A database system normally contains a lot of data in addition to users\u2019 data. For example, it stores data about data, known as metadata, to locate and retrieve data easily. It is rather difficult to modify or update a set of metadata once it is stored in the database. But as a DBMS expands, it needs to change over time to satisfy the requirements of the users. If the entire data is dependent, it would become a tedious and highly complex job."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "Metadata itself follows a layered architecture, so that when we change data at one layer, it does not affect the data at another level. This data is independent but mapped to each other."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "Logical data is data about database, that is, it stores information about how data is managed inside. For example, a table (relation) stored in the database and all its constraints, applied on that relation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "Logical data independence is a kind of mechanism, which liberalizes itself from actual data stored on the disk. If we do some changes on table format, it should not change the data residing on the disk."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "All the schemas are logical, and the actual data is stored in bit format on the disk. Physical data independence is the power to change the physical data without impacting the schema or logical data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_independence.htm", "content": "For example, in case we want to change or upgrade the storage system itself \u2212 suppose we want to replace hard-disks with SSD \u2212 it should not have any impact on the logical data or schemas."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "The ER model defines the conceptual view of a database. It works around real-world entities and the associations among them. At view level, the ER model is considered a good option for designing databases."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "An entity can be a real-world object, either animate or inanimate, that can be easily identifiable. For example, in a school database, students, teachers, classes, and courses offered can be considered as entities. All these entities have some attributes or properties that give them their identity."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "An entity set is a collection of similar types of entities. An entity set may contain entities with attribute sharing similar values. For example, a Students set may contain all the students of a school; likewise a Teachers set may contain all the teachers of a school from all faculties. Entity sets need not be disjoint."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "Entities are represented by means of their properties, called "},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "There exists a domain or range of values that can be assigned to attributes. For example, a student's name cannot be a numeric value. It has to be alphabetic. A student's age cannot be negative, etc."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "These attribute types can come together in a way like \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "Key is an attribute or collection of attributes that uniquely identifies an entity among entity set."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "For example, the roll_number of a student makes him/her identifiable among students."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "The association among entities is called a relationship. For example, an employee "},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "A set of relationships of similar type is called a relationship set. Like entities, a relationship too can have attributes. These attributes are called "},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": "The number of participating entities in a relationship defines the degree of the relationship."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_basic_concepts.htm", "content": " defines the number of entities in one entity set, which can be associated with the number of entities of other set via relationship set."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": "Let us now learn how the ER Model is represented by means of an ER diagram. Any object, for example, entities, attributes of an entity, relationship sets, and attributes of relationship sets, can be represented with the help of an ER diagram."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": "Entities are represented by means of rectangles. Rectangles are named with the entity set they represent."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": "Attributes are the properties of entities. Attributes are represented by means of ellipses. Every ellipse represents one attribute and is directly connected to its entity (rectangle)."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": "If the attributes are "},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": " attributes are depicted by double ellipse."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": " attributes are depicted by dashed ellipse."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": "Relationships are represented by diamond-shaped box. Name of the relationship is written inside the diamond-box. All the entities (rectangles) participating in a relationship, are connected to it by a line."},
{"page": "https://www.tutorialspoint.com/dbms/er_diagram_representation.htm", "content": "A relationship where two entities are participating is called a "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "The ER Model has the power of expressing database entities in a conceptual hierarchical manner. As the hierarchy goes up, it generalizes the view of entities, and as we go deep in the hierarchy, it gives us the detail of every entity included."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "Going up in this structure is called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "As mentioned above, the process of generalizing entities, where the generalized entities contain the properties of all the generalized entities, is called generalization. In generalization, a number of entities are brought together into one generalized entity based on their similar characteristics. For example, pigeon, house sparrow, crow and dove can all be generalized as Birds."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "Specialization is the opposite of generalization. In specialization, a group of entities is divided into sub-groups based on their characteristics. Take a group \u2018Person\u2019 for example. A person has name, date of birth, gender, etc. These properties are common in all persons, human beings. But in a company, persons can be identified as employee, employer, customer, or vendor, based on what role they play in the company."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "Similarly, in a school database, persons can be specialized as teacher, student, or a staff, based on what role they play in school as entities."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "We use all the above features of ER-Model in order to create classes of objects in object-oriented programming. The details of entities are generally hidden from the user; this process known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "Inheritance is an important feature of Generalization and Specialization. It allows lower-level entities to inherit the attributes of higher-level entities."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_generalization_aggregation.htm", "content": "For example, the attributes of a Person class such as name, age, and gender can be inherited by lower-level entities such as Student or Teacher."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "Dr Edgar F. Codd, after his extensive research on the Relational Model of database systems, came up with twelve rules of his own, which according to him, a database must obey in order to be regarded as a true relational database."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "These rules can be applied on any database system that manages stored data using only its relational capabilities. This is a foundation rule, which acts as a base for all the other rules."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "The data stored in a database, may it be user data or metadata, must be a value of some table cell. Everything in a database must be stored in a table format."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "Every single data element (value) is guaranteed to be accessible logically with a combination of table-name, primary-key (row value), and attribute-name (column value). No other means, such as pointers, can be used to access data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "The NULL values in a database must be given a systematic and uniform treatment. This is a very important rule because a NULL can be interpreted as one the following \u2212 data is missing, data is not known, or data is not applicable."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "The structure description of the entire database must be stored in an online catalog, known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "A database can only be accessed using a language having linear syntax that supports data definition, data manipulation, and transaction management operations. This language can be used directly or by means of some application. If the database allows access to data without any help of this language, then it is considered as a violation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "All the views of a database, which can theoretically be updated, must also be updatable by the system."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "A database must support high-level insertion, updation, and deletion. This must not be limited to a single row, that is, it must also support union, intersection and minus operations to yield sets of data records."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "The data stored in a database must be independent of the applications that access the database. Any change in the physical structure of a database must not have any impact on how the data is being accessed by external applications."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "The logical data in a database must be independent of its user\u2019s view (application). Any change in logical data must not affect the applications using it. For example, if two tables are merged or one is split into two different tables, there should be no impact or change on the user application. This is one of the most difficult rule to apply."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "A database must be independent of the application that uses it. All its integrity constraints can be independently modified without the need of any change in the application. This rule makes a database independent of the front-end application and its interface."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "The end-user must not be able to see that the data is distributed over various locations. Users should always get the impression that the data is located at one site only. This rule has been regarded as the foundation of distributed database systems."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_codds_rules.htm", "content": "If a system has an interface that provides access to low-level records, then the interface must not be able to subvert the system and bypass security and integrity constraints."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Relational data model is the primary data model, which is used widely around the world for data storage and processing. This model is simple and it has all the properties and capabilities required to process data with storage efficiency."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": " \u2212 In relational data model, relations are saved in the format of Tables. This format stores the relation among entities. A table has rows and columns, where rows represents records and columns represent the attributes."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": " \u2212 A single row of a table, which contains a single record for that relation is called a tuple."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": " \u2212 A finite set of tuples in the relational database system represents relation instance. Relation instances do not have duplicate tuples."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": " \u2212 A relation schema describes the relation name (table name), attributes, and their names."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": " \u2212 Each row has one or more attributes, known as relation key, which can identify the row in the relation (table) uniquely."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": " \u2212 Every attribute has some pre-defined value scope, known as attribute domain."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Every relation has some conditions that must hold for it to be a valid relation.  These conditions are called "},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "There must be at least one minimal subset of attributes in the relation, which can identify a tuple uniquely. This minimal subset of attributes is called "},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Key constraints force that \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Key constraints are also referred to as Entity Constraints."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Attributes have specific values in real-world scenario. For example, age can only be a positive integer. The same constraints have been tried to employ on the attributes of a relation. Every attribute is bound to have a specific range of values. For example, age cannot be less than zero and telephone numbers cannot contain a digit outside 0-9."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Referential integrity constraints work on the concept of Foreign Keys. A foreign key is a key attribute of a relation that can be referred in other relation."},
{"page": "https://www.tutorialspoint.com/dbms/relational_data_model.htm", "content": "Referential integrity constraint states that if a relation refers to a key attribute of a different or same relation, then that key element must exist."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Relational database systems are expected to be equipped with a query language that can assist its users to query the database instances. There are two kinds of query languages \u2212 relational algebra and relational calculus."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Relational algebra is a procedural query language, which takes instances of relations as input and yields instances of relations as output. It uses operators to perform queries. An operator can be either "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "The fundamental operations of relational algebra are as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "We will discuss all these operations in the following sections."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "It selects tuples that satisfy the given predicate from a relation."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 \u03c3"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Where "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Selects tuples from books where subject is 'database'."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Selects tuples from books where subject is 'database' and 'price' is 450."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Selects tuples from books where subject is 'database' and 'price' is 450 or those books published after 2010."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "It projects column(s) that satisfy a given predicate."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Notation \u2212 \u220f"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Where A"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Duplicate rows are automatically eliminated, as relation is a set."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Selects and projects columns named as subject and author from the relation Books."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "It performs binary union between two given relations and is defined as \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 r U s "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Where "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "For a union operation to be valid, the following conditions must hold \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Projects the names of the authors who have either written a book or an article or both."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "The result of set difference operation is tuples, which are present in one relation but are not in the second relation."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Finds all the tuples that are present in "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Provides the name of authors who have written books but not articles."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Combines information of two different relations into one. "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 r \u03a7 s"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Where "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "r \u03a7  s = { q t | q \u2208  r and t \u2208 s}"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Yields a relation, which shows all the books and articles written by tutorialspoint."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "The results of relational algebra are also relations but without any name. The rename operation allows us to rename the output relation. 'rename' operation is denoted with small Greek letter "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Where the result of expression "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Additional operations are \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "In contrast to Relational Algebra, Relational Calculus is a non-procedural query language, that is, it tells what to do but never explains how to do it."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Relational calculus exists in two forms \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Filtering variable ranges over tuples"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 {T | Condition} "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Returns all tuples T that satisfies a condition."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Returns tuples with 'name' from Author who has written article on 'database'."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "TRC can be quantified. We can use Existential (\u2203) and Universal Quantifiers (\u2200)."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 The above query will yield the same result as the previous one."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "In DRC, the filtering variable uses the domain of attributes instead of entire tuple values (as done in TRC, mentioned above)."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "{ a"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Where a1, a2 are attributes and "},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": " \u2212 Yields Article, Page, and Subject from the relation TutorialsPoint, where subject is database."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "Just like TRC, DRC can also be written using existential and universal quantifiers.  DRC also involves relational operators."},
{"page": "https://www.tutorialspoint.com/dbms/relational_algebra.htm", "content": "The expression power of Tuple Relation Calculus and Domain Relation Calculus is equivalent to Relational Algebra."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "ER Model, when conceptualized into diagrams, gives a good overview of entity-relationship, which is easier to understand. ER diagrams can be mapped to relational schema, that is, it is possible to create relational schema using ER diagram. We cannot import all the ER constraints into relational model, but an approximate schema can be generated."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "There are several processes and algorithms available to convert ER Diagrams into Relational Schema. Some of them are automated and some of them are manual. We may focus here on the mapping diagram contents to relational basics."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "ER diagrams mainly comprise of \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "An entity is a real-world object with some attributes."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "A relationship is an association among entities."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "A weak entity set is one which does not have any primary key associated with it."},
{"page": "https://www.tutorialspoint.com/dbms/er_model_to_relational_model.htm", "content": "ER specialization or generalization comes in the form of hierarchical entity sets."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "SQL is a programming language for Relational Databases. It is designed over relational algebra and tuple relational calculus. SQL comes as a package with all major distributions of RDBMS."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "SQL comprises both data definition and data manipulation languages. Using the data definition properties of SQL, one can design and modify database schema, whereas data manipulation properties allows SQL to store and retrieve data from database."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "SQL uses the following set of commands to define database schema \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "Creates new databases, tables and views from RDBMS."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "Drops commands, views, tables, and databases from RDBMS."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "\u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "Modifies database schema."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "\u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "This command adds an attribute in the relation "},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "SQL is equipped with data manipulation language (DML). DML modifies the database instance by inserting, updating and deleting its data. DML is responsible for all forms data modification in a database. SQL contains the following set of commands in its DML section \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "These basic constructs allow database programmers and users to enter data and information into the database and retrieve efficiently using a number of filter options."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "This command will yield the names of authors from the relation "},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "This command is used for inserting values into the rows of a table (relation)."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "\u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "Or"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "This command is used for updating or modifying the values of columns in a table (relation)."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": "This command is used for removing one or more rows from a table (relation)."},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/sql_overview.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Functional dependency (FD) is a set of constraints between two attributes in a relation. Functional dependency says that if two tuples have same values for attributes A1, A2,..., An, then those two tuples must have to have same values for attributes B1, B2, ..., Bn."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Functional dependency is represented by an arrow sign (\u2192) that is, X\u2192Y, where X functionally determines Y. The left-hand side attributes determine the values of attributes on the right-hand side."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "If F is a set of functional dependencies then the closure of F, denoted as F"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "If a database design is not perfect, it may contain anomalies, which are like a bad dream for any database administrator. Managing a database with anomalies is next to impossible."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Normalization is a method to remove all these anomalies and bring the database to a consistent state."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "First Normal Form is defined in the definition of relations (tables) itself. This rule defines that all the attributes in a relation must have atomic domains. The values in an atomic domain are indivisible units."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "We re-arrange the relation (table) as below, to convert it to First Normal Form."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Each attribute must contain only a single value from its pre-defined domain."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Before we learn about the second normal form, we need to understand the following \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "If we follow second normal form, then every non-prime attribute should be fully functionally dependent on prime key attribute. That is, if X \u2192 A holds, then there should not be any proper subset Y of X, for which Y \u2192 A also holds true."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "We see here in Student_Project relation that the prime key attributes are Stu_ID and Proj_ID. According to the rule, non-key attributes, i.e. Stu_Name and Proj_Name must be dependent upon both and not on any of the prime key attribute individually. But we find that Stu_Name can be identified by Stu_ID and Proj_Name can be identified by Proj_ID independently. This is called "},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "We broke the relation in two as depicted in the above picture. So there exists no partial dependency."},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "For a relation to be in Third Normal Form, it must be in Second Normal form and the following must satisfy \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "We find that in the above Student_detail relation, Stu_ID is the key and only prime key attribute. We find that City can be identified by Stu_ID as well as Zip itself.  Neither Zip is a superkey nor is City a prime attribute. Additionally, Stu_ID \u2192 Zip \u2192 City, so there exists "},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "To bring this relation into third normal form, we break the relation into two relations as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Boyce-Codd Normal Form (BCNF) is an extension of Third Normal Form on strict terms. BCNF states that \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "In the above image, Stu_ID is the super-key in the relation Student_Detail and Zip is the super-key in the relation ZipCodes. So,"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Stu_ID \u2192 Stu_Name, Zip"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "and"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Zip \u2192 City"},
{"page": "https://www.tutorialspoint.com/dbms/database_normalization.htm", "content": "Which confirms that both the relations are in BCNF."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "We understand the benefits of taking a Cartesian product of two relations, which gives us all the possible tuples that are paired together. But it might not be feasible for us in certain cases to take a Cartesian product where we encounter huge relations with thousands of tuples having a considerable large number of attributes."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": " is a combination of a Cartesian product followed by a selection process. A Join operation pairs two tuples from different relations, if and only if a given join condition is satisfied."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "We will briefly describe various join types in the following sections."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "Theta join combines tuples from different relations provided they satisfy the theta condition. The join condition is denoted by the symbol "},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "R1 and R2 are relations having attributes (A1, A2, .., An) and (B1, B2,.. ,Bn) such that the attributes don\u2019t have anything in common, that is R1 \u2229 R2 = \u03a6."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "Theta join can use all kinds of comparison operators."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "Student_Detail \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": null},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "When Theta join uses only "},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "Natural join does not use any comparison operator. It does not concatenate the way a Cartesian product does. We can perform a Natural Join only if there is at least one common attribute that exists between two relations. In addition, the attributes must have the same name and domain."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "Natural join acts on those matching attributes where the values of attributes in both the relations are same."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "Theta Join, Equijoin, and Natural Join are called inner joins. An inner join includes only those tuples with matching attributes and the rest are discarded in the resulting relation. Therefore, we need to use outer joins to include all the tuples from the participating relations in the resulting relation. There are three kinds of outer joins \u2212 left outer join, right outer join, and full outer join."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "All the tuples from the Left relation, R, are included in the resulting relation. If there are tuples in R without any matching tuple in the Right relation S, then the S-attributes of the resulting relation are made NULL."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "All the tuples from the Right relation, S, are included in the resulting relation. If there are tuples in S without any matching tuple in R, then the R-attributes of resulting relation are made NULL."},
{"page": "https://www.tutorialspoint.com/dbms/database_joins.htm", "content": "All the tuples from both participating relations are included in the resulting relation. If there are no matching tuples for both relations, their respective unmatched attributes are made NULL."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "Databases are stored in file formats, which contain records. At physical level, the actual data is stored in electromagnetic format on some device. These storage devices can be broadly categorized into three types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "A computer system has a well-defined hierarchy of memory. A CPU has direct access to it main memory as well as its inbuilt registers. The access time of the main memory is obviously less than the CPU speed. To minimize this speed mismatch, cache memory is introduced. Cache memory provides the fastest access time and it contains data that is most frequently accessed by the CPU."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "The memory with the fastest access is the costliest one. Larger storage devices offer slow speed and they are less expensive, however they can store huge volumes of data as compared to CPU registers or cache memory."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "Hard disk drives are the most common secondary storage devices in present computer systems. These are called magnetic disks because they use the concept of magnetization to store information. Hard disks consist of metal disks coated with magnetizable material. These disks are placed vertically on a spindle. A read/write head moves in between the disks and is used to magnetize or de-magnetize the spot under it. A magnetized spot can be recognized as 0 (zero) or 1 (one)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "Hard disks are formatted in a well-defined order to store data efficiently. A hard disk plate has many concentric circles on it, called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID or "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID consists of an array of disks in which multiple disks are connected together to achieve different goals. RAID levels define the use of disk arrays."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "In this level, a striped array of disks is implemented. The data is broken down into blocks and the blocks are distributed among disks. Each disk receives a block of data to write/read in parallel. It enhances the speed and performance of the storage device. There is no parity and backup in Level 0."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID 1 uses mirroring techniques. When data is sent to a RAID controller, it sends a copy of data to all the disks in the array. RAID level 1 is also called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID 2 records Error Correction Code using Hamming distance for its data, striped on different disks. Like level 0, each data bit in a word is recorded on a separate disk and ECC codes of the data words are stored on a different set disks. Due to its complex structure and high cost, RAID 2 is not commercially available."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID 3 stripes the data onto multiple disks. The parity bit generated for data word is stored on a different disk. This technique makes it to overcome single disk failures."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "In this level, an entire block of data is written onto data disks and then the parity is generated and stored on a different disk. Note that level 3 uses byte-level striping, whereas level 4 uses block-level striping. Both level 3 and level 4 require at least three disks to implement RAID."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID 5 writes whole data blocks onto different disks, but the parity bits generated for data block stripe are distributed among all the data disks rather than storing them on a different dedicated disk."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_storage_system.htm", "content": "RAID 6 is an extension of level 5. In this level, two independent parities are generated and stored in distributed fashion among multiple disks. Two parities provide additional fault tolerance. This level requires at least four disk drives to implement RAID."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "Relative data and information is stored collectively in file formats. A file is a sequence of records stored in binary format. A disk drive is formatted into several blocks that can store records. File records are mapped onto those disk blocks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "File Organization defines how file records are mapped onto disk blocks. We have four types of File Organization to organize file records \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "When a file is created using Heap File Organization, the Operating System allocates memory area to that file without any further accounting details. File records can be placed anywhere in that memory area. It is the responsibility of the software to manage the records. Heap File does not support any ordering, sequencing, or indexing on its own."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "Every file record contains a data field (attribute) to uniquely identify that record. In sequential file organization, records are placed in the file in some sequential order based on the unique key field or search key. Practically, it is not possible to store all the records sequentially in physical form."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "Hash File Organization uses Hash function computation on some fields of the records. The output of the hash function determines the location of disk block where the records are to be placed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "Clustered file organization is not considered good for large databases. In this mechanism, related records from one or more relations are kept in the same disk block, that is, the ordering of records is not based on primary key or search key."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "Operations on database files can be broadly classified into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "Update operations change the data values by insertion, deletion, or update. Retrieval operations, on the other hand, do not alter the data but retrieve them after optional conditional filtering. In both types of operations, selection plays a significant role. Other than creation and deletion of a file, there could be several operations, which can be done on files."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_file_structure.htm", "content": "The organization of data inside a file plays a major role here. The process to locate the file pointer to a desired record inside a file various based on whether the records are arranged sequentially or clustered."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "We know that data is stored in the form of records. Every record has a key field, which helps it to be recognized uniquely."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "Indexing is a data structure technique to efficiently retrieve records from the database files based on some attributes on which the indexing has been done. Indexing in database systems is similar to what we see in books."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "Indexing is defined based on its indexing attributes. Indexing can be of the following types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "Ordered Indexing is of two types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "In dense index, there is an index record for every search key value in the database. This makes searching faster but requires more space to store index records itself. Index records contain search key value and a pointer to the actual record on the disk."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "In sparse index, index records are not created for every search key. An index record here contains a search key and an actual pointer to the data on the disk. To search a record, we first proceed by index record and reach at the actual location of the data. If the data we are looking for is not where we directly reach by following the index, then the system starts sequential search until the desired data is found."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "Index records comprise search-key values and data pointers. Multilevel index is stored on the disk along with the actual database files. As the size of the database grows, so does the size of the indices. There is an immense need to keep the index records in the main memory so as to speed up the search operations. If single-level index is used, then a large size index cannot be kept in memory which leads to multiple disk accesses."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "Multi-level Index helps in breaking down the index into several smaller indices in order to make the outermost level so small that it can be saved in a single disk block, which can easily be accommodated anywhere in the main memory."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "A B"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": "Every leaf node is at equal distance from the root node. A B"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_indexing.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "For a huge database structure, it can be almost next to impossible to search all the index values through all its level and then reach the destination data block to retrieve the desired data. Hashing is an effective technique to calculate the direct location of a data record on the disk without using index structure."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "Hashing uses hash functions with search keys as parameters to generate the address of a data record."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "In static hashing, when a search-key value is provided, the hash function always computes the same address. For example, if mod-4 hash function is used, then it shall generate only 5 values. The output address shall always be same for that function. The number of buckets provided remains unchanged at all times."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "The condition of bucket-overflow is known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "The problem with static hashing is that it does not expand or shrink dynamically as the size of the database grows or shrinks. Dynamic hashing provides a mechanism in which data buckets are added and removed dynamically and on-demand. Dynamic hashing is also known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "Hash function, in dynamic hashing, is made to produce a large number of values and only a few are used initially."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "The prefix of an entire hash value is taken as a hash index. Only a portion of the hash value is used for computing bucket addresses. Every hash index has a depth value to signify how many bits are used for computing a hash function. These bits can address 2n buckets. When all these bits are consumed \u2212 that is, when all the buckets are full \u2212 then the depth value is increased linearly and twice the buckets are allocated."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "Hashing is not favorable when the data is organized in some ordering and the queries require a range of data. When data is discrete and random, hash performs the best."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_hashing.htm", "content": "Hashing algorithms have high complexity than indexing. All hash operations are done in constant time."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "A transaction can be defined as a group of tasks. A single task is the minimum processing unit which cannot be divided further."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "Let\u2019s take an example of a simple transaction. Suppose a bank employee transfers Rs 500 from A's account to B's account. This very simple and small transaction involves several low-level tasks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": null},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": null},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "A transaction is a very small unit of a program and it may contain several lowlevel tasks. A transaction in a database system must maintain "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "When multiple transactions are being executed by the operating system in a multiprogramming environment, there are possibilities that instructions of one transactions are interleaved with some other transaction."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "In a multi-transaction environment, serial schedules are considered as a benchmark. The execution sequence of an instruction in a transaction cannot be changed, but two transactions can have their instructions executed in a random fashion. This execution does no harm if two transactions are mutually independent and working on different segments of data; but in case these two transactions are working on the same data, then the results may vary. This ever-varying result may bring the database to an inconsistent state."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "To resolve this problem, we allow parallel execution of a transaction schedule, if its transactions are either serializable or have some equivalence relation among them."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "An equivalence schedule can be of the following types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "If two schedules produce the same result after execution, they are said to be result equivalent. They may yield the same result for some value and different results for another set of values. That's why this equivalence is not generally considered significant."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "Two schedules would be view equivalence if the transactions in both the schedules perform similar actions in a similar manner."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "For example \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "Two schedules would be conflicting if they have the following properties \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "Two schedules having multiple transactions with conflicting operations are said to be conflict equivalent if and only if \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": " \u2212 View equivalent schedules are view serializable and conflict equivalent schedules are conflict serializable. All conflict serializable schedules are view serializable too."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_transaction.htm", "content": "A transaction in a database can be in one of the following states \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "In a multiprogramming environment where multiple transactions can be executed simultaneously, it is highly important to control the concurrency of transactions. We have concurrency control protocols to ensure atomicity, isolation, and serializability of concurrent transactions. Concurrency control protocols can be broadly divided into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Database systems equipped with lock-based protocols use a mechanism by which any transaction cannot read or write data until it acquires an appropriate lock on it. Locks are of two kinds \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "There are four types of lock protocols available \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Simplistic lock-based protocols allow transactions to obtain a lock on every object before a 'write' operation is performed. Transactions may unlock the data item after completing the \u2018write\u2019 operation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Pre-claiming protocols evaluate their operations and create a list of data items on which they need locks. Before initiating an execution, the transaction requests the system for all the locks it needs beforehand. If all the locks are granted, the transaction executes and releases all the locks when all its operations are over. If all the locks are not granted, the transaction rolls back and waits until all the locks are granted."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "This locking protocol divides the execution phase of a transaction into three parts. In the first part, when the transaction starts executing, it seeks permission for the locks it requires. The second part is where the transaction acquires all the locks. As soon as the transaction releases its first lock, the third phase starts. In this phase, the transaction cannot demand any new locks; it only releases the acquired locks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Two-phase locking has two phases, one is "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "To claim an exclusive (write) lock, a transaction must first acquire a shared (read) lock and then upgrade it to an exclusive lock."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "The first phase of Strict-2PL is same as 2PL. After acquiring all the locks in the first phase, the transaction continues to execute normally. But in contrast to 2PL, Strict-2PL does not release a lock after using it. Strict-2PL holds all the locks until the commit point and releases all the locks at a time."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Strict-2PL does not have cascading abort as 2PL does."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "The most commonly used concurrency protocol is the timestamp based protocol. This protocol uses either system time or logical counter as a timestamp."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Lock-based protocols manage the order between the conflicting pairs among transactions at the time of execution, whereas timestamp-based protocols start working as soon as a transaction is created."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Every transaction has a timestamp associated with it, and the ordering is determined by the age of the transaction. A transaction created at 0002 clock time would be older than all other transactions that come after it. For example, any transaction 'y' entering the system at 0004 is two seconds younger and the priority would be given to the older one."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "In addition, every data item is given the latest read and write-timestamp. This lets the system know when the last \u2018read and write\u2019 operation was performed on the data item."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "The timestamp-ordering protocol ensures serializability among transactions in their conflicting read and write operations. This is the responsibility of the protocol system that the conflicting pair of tasks should be executed according to the timestamp values of the transactions."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Timestamp ordering protocol works as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "This rule states if TS(Ti) < W-timestamp(X), then the operation is rejected and T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Time-stamp ordering rules can be modified to make the schedule view serializable."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_concurrency_control.htm", "content": "Instead of making T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "In a multi-process system, deadlock is an unwanted situation that arises in a shared resource environment, where a process indefinitely waits for a resource that is held by another process."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "For example, assume a set of transactions {T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "Deadlocks are not healthy for a system. In case a system is stuck in a deadlock, the transactions involved in the deadlock are either rolled back or restarted."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "To prevent any deadlock situation in the system, the DBMS aggressively inspects all the operations, where transactions are about to execute. The DBMS inspects the operations and analyzes if they can create a deadlock situation. If it finds that a deadlock situation might occur, then that transaction is never allowed to be executed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "There are deadlock prevention schemes that use timestamp ordering mechanism of transactions in order to predetermine a deadlock situation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "In this scheme, if a transaction requests to lock a resource (data item), which is already held with a conflicting lock by another transaction, then one of the two possibilities may occur \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "This scheme allows the older transaction to wait but kills the younger one."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "In this scheme, if a transaction requests to lock a resource (data item), which is already held with conflicting lock by some another transaction, one of the two possibilities may occur \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "This scheme, allows the younger transaction to wait; but when an older transaction requests an item held by a younger one, the older transaction forces the younger one to abort and release the item."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "In both the cases, the transaction that enters the system at a later stage is aborted."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "Aborting a transaction is not always a practical approach. Instead, deadlock avoidance mechanisms can be used to detect any deadlock situation in advance. Methods like \"wait-for graph\" are available but they are suitable for only those systems where transactions are lightweight having fewer instances of resource. In a bulky system, deadlock prevention techniques may work well."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "This is a simple method available to track if any deadlock situation may arise. For each transaction entering into the system, a node is created. When a transaction T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "The system maintains this wait-for graph for every transaction waiting for some data items held by others. The system keeps checking if there's any cycle in the graph."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_deadlock.htm", "content": "Here, we can use any of the two following approaches \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "A volatile storage like RAM stores all the active logs, disk buffers, and related data. In addition, it stores all the transactions that are being currently executed. What happens if such a volatile storage crashes abruptly? It would obviously take away all the logs and active copies of the database. It makes recovery almost impossible, as everything that is required to recover the data is lost."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "Following techniques may be adopted in case of loss of volatile storage \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "A catastrophic failure is one where a stable, secondary storage device gets corrupt. With the storage device, all the valuable data that is stored inside is lost. We have two different strategies to recover data from such a catastrophic failure \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "Grown-up databases are too bulky to be frequently backed up. In such cases, we have techniques where we can restore a database just by looking at its logs. So, all that we need to do here is to take a backup of all the logs at frequent intervals of time. The database can be backed up once a week, and the logs being very small can be backed up every day or as frequently as possible."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "Remote backup provides a sense of security in case the primary location where the database is located gets destroyed. Remote backup can be offline or real-time or online. In case it is offline, it is maintained manually."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "Online backup systems are more real-time and lifesavers for database administrators and investors. An online backup system is a mechanism where every bit of the real-time data is backed up simultaneously at two distant places. One of them is directly connected to the system and the other one is kept at a remote place as backup."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_backup.htm", "content": "As soon as the primary database storage fails, the backup system senses the failure and switches the user system to the remote storage. Sometimes this is so instant that the users can\u2019t even realize a failure."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "DBMS is a highly complex system with hundreds of transactions being executed every second. The durability and robustness of a DBMS depends on its complex architecture and its underlying hardware and system software. If it fails or crashes amid transactions, it is expected that the system would follow some sort of algorithm or techniques to recover lost data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "To see where the problem has occurred, we generalize a failure into various categories, as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "A transaction has to abort when it fails to execute or when it reaches a point from where it can\u2019t go any further. This is called transaction failure where only a few transactions or processes are hurt."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "Reasons for a transaction failure could be \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "There are problems \u2212 external to the system \u2212 that may cause the system to stop abruptly and cause the system to crash. For example, interruptions in power supply may cause the failure of underlying hardware or software failure."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "Examples may include operating system errors."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "In early days of technology evolution, it was a common problem where hard-disk drives or storage drives used to fail frequently."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "Disk failures include formation of bad sectors, unreachability to the disk, disk head crash or any other failure, which destroys all or a part of disk storage."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "We have already described the storage system. In brief, the storage structure can be divided into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "When a system crashes, it may have several transactions being executed and various files opened for them to modify the data items. Transactions are made of various operations, which are atomic in nature. But according to ACID properties of DBMS, atomicity of transactions as a whole must be maintained, that is, either all the operations are executed or none."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "When a DBMS recovers from a crash, it should maintain the following \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "There are two types of techniques, which can help a DBMS in recovering as well as maintaining the atomicity of a transaction \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "Log is a sequence of records, which maintains the records of actions performed by a transaction. It is important that the logs are written prior to the actual modification and stored on a stable storage media, which is failsafe."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "Log-based recovery works as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "It reads T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "The database can be modified using two approaches \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "When more than one transaction are being executed in parallel, the logs are interleaved. At the time of recovery, it would become hard for the recovery system to backtrack all logs, and then start recovering. To ease this situation, most modern DBMS use the concept of 'checkpoints'."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "Keeping and maintaining logs in real time and in real environment may fill out all the memory space available in the system. As time passes, the log file may grow too big to be handled at all. Checkpoint is a mechanism where all the previous logs are removed from the system and stored permanently in a storage disk. Checkpoint declares a point before which the DBMS was in consistent state, and all the transactions were committed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "When a system with concurrent transactions crashes and recovers, it behaves in the following manner \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_data_recovery.htm", "content": "All the transactions in the undo-list are then undone and their logs are removed. All the transactions in the redo-list and their previous logs are removed and then redone before saving their logs."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " is a collection of related data and data is a collection of facts and figures that can be processed to produce information."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Mostly data represents recordable facts. Data aids in producing information, which is based on facts. For example, if we have data about marks obtained by all students, we can then conclude about toppers and average marks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Traditionally, data was organized in file formats. DBMS was a new concept then, and all the research was done to make it overcome the deficiencies in traditional style of data management. A modern DBMS has the following characteristics \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A typical DBMS has users with different rights and permissions who use it for different purposes. Some users retrieve data and some back it up. The users of a DBMS can be broadly categorized as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The design of a DBMS depends on its architecture. It can be centralized or decentralized or hierarchical. The architecture of a DBMS can be seen as either single tier or multi-tier. An n-tier architecture divides the whole system into related but independent "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In 1-tier architecture, the DBMS is the only entity where the user directly sits on the DBMS and uses it. Any changes done here will directly be done on the DBMS itself. It does not provide handy tools for end-users. Database designers and programmers normally prefer to use single-tier architecture."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If the architecture of DBMS is 2-tier, then it must have an application through which the DBMS can be accessed. Programmers use 2-tier architecture where they access the DBMS by means of an application. Here the application tier is entirely independent of the database in terms of operation, design, and programming."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A 3-tier architecture separates its tiers from each other based on the complexity of the users and how they use the data present in the database. It is the most widely used architecture to design a DBMS."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Multiple-tier database architecture is highly modifiable, as almost all its components are independent and can be changed independently."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Data models define how the logical structure of a database is modeled. Data Models are fundamental entities to introduce abstraction in a DBMS. Data models define how data is connected to each other and how they are processed and stored inside the system."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The very first data model could be flat data-models, where all the data used are to be kept in the same plane. Earlier data models were not so scientific, hence they were prone to introduce lots of duplication and update anomalies."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Entity-Relationship (ER) Model is based on the notion of real-world entities and relationships among them. While formulating real-world scenario into the database model, the ER Model creates entity set, relationship set, general attributes and constraints."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "ER Model is best used for the conceptual design of a database."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "ER Model is based on \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "These concepts are explained below."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The most popular data model in DBMS is the Relational Model. It is more scientific a model than others. This model is based on first-order predicate logic and defines a table as an "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The main highlights of this model are \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database schema is the skeleton structure that represents the logical view of the entire database. It defines how the data is organized and how the relations among them are associated. It formulates all the constraints that are to be applied on the data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database schema defines its entities and the relationship among them. It contains a descriptive detail of the database, which can be depicted by means of schema diagrams. It\u2019s the database designers who design the schema to help programmers understand the database and make it useful."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database schema can be divided broadly into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "It is important that we distinguish these two terms individually. Database schema is the skeleton of database. It is designed when the database doesn't exist at all. Once the database is operational, it is very difficult to make any changes to it. A database schema does not contain any data or information."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database instance is a state of operational database with data at any given time. It contains a snapshot of the database. Database instances tend to change with time. A DBMS ensures that its every instance (state) is in a valid state, by diligently following all the validations, constraints, and conditions that the database designers have imposed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If a database system is not multi-layered, then it becomes difficult to make any changes in the database system. Database systems are designed in multi-layers as we learnt earlier."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database system normally contains a lot of data in addition to users\u2019 data. For example, it stores data about data, known as metadata, to locate and retrieve data easily. It is rather difficult to modify or update a set of metadata once it is stored in the database. But as a DBMS expands, it needs to change over time to satisfy the requirements of the users. If the entire data is dependent, it would become a tedious and highly complex job."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Metadata itself follows a layered architecture, so that when we change data at one layer, it does not affect the data at another level. This data is independent but mapped to each other."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Logical data is data about database, that is, it stores information about how data is managed inside. For example, a table (relation) stored in the database and all its constraints, applied on that relation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Logical data independence is a kind of mechanism, which liberalizes itself from actual data stored on the disk. If we do some changes on table format, it should not change the data residing on the disk."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "All the schemas are logical, and the actual data is stored in bit format on the disk. Physical data independence is the power to change the physical data without impacting the schema or logical data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For example, in case we want to change or upgrade the storage system itself \u2212 suppose we want to replace hard-disks with SSD \u2212 it should not have any impact on the logical data or schemas."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The ER model defines the conceptual view of a database. It works around real-world entities and the associations among them. At view level, the ER model is considered a good option for designing databases."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "An entity can be a real-world object, either animate or inanimate, that can be easily identifiable. For example, in a school database, students, teachers, classes, and courses offered can be considered as entities. All these entities have some attributes or properties that give them their identity."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "An entity set is a collection of similar types of entities. An entity set may contain entities with attribute sharing similar values. For example, a Students set may contain all the students of a school; likewise a Teachers set may contain all the teachers of a school from all faculties. Entity sets need not be disjoint."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Entities are represented by means of their properties, called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There exists a domain or range of values that can be assigned to attributes. For example, a student's name cannot be a numeric value. It has to be alphabetic. A student's age cannot be negative, etc."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "These attribute types can come together in a way like \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Key is an attribute or collection of attributes that uniquely identifies an entity among entity set."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For example, the roll_number of a student makes him/her identifiable among students."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The association among entities is called a relationship. For example, an employee "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A set of relationships of similar type is called a relationship set. Like entities, a relationship too can have attributes. These attributes are called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The number of participating entities in a relationship defines the degree of the relationship."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " defines the number of entities in one entity set, which can be associated with the number of entities of other set via relationship set."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Let us now learn how the ER Model is represented by means of an ER diagram. Any object, for example, entities, attributes of an entity, relationship sets, and attributes of relationship sets, can be represented with the help of an ER diagram."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Entities are represented by means of rectangles. Rectangles are named with the entity set they represent."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Attributes are the properties of entities. Attributes are represented by means of ellipses. Every ellipse represents one attribute and is directly connected to its entity (rectangle)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If the attributes are "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " attributes are depicted by double ellipse."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " attributes are depicted by dashed ellipse."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relationships are represented by diamond-shaped box. Name of the relationship is written inside the diamond-box. All the entities (rectangles) participating in a relationship, are connected to it by a line."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A relationship where two entities are participating is called a "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Let us now learn how the ER Model is represented by means of an ER diagram. Any object, for example, entities, attributes of an entity, relationship sets, and attributes of relationship sets, can be represented with the help of an ER diagram."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Entities are represented by means of rectangles. Rectangles are named with the entity set they represent."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Attributes are the properties of entities. Attributes are represented by means of ellipses. Every ellipse represents one attribute and is directly connected to its entity (rectangle)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If the attributes are "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " attributes are depicted by double ellipse."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " attributes are depicted by dashed ellipse."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relationships are represented by diamond-shaped box. Name of the relationship is written inside the diamond-box. All the entities (rectangles) participating in a relationship, are connected to it by a line."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A relationship where two entities are participating is called a "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The ER Model has the power of expressing database entities in a conceptual hierarchical manner. As the hierarchy goes up, it generalizes the view of entities, and as we go deep in the hierarchy, it gives us the detail of every entity included."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Going up in this structure is called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "As mentioned above, the process of generalizing entities, where the generalized entities contain the properties of all the generalized entities, is called generalization. In generalization, a number of entities are brought together into one generalized entity based on their similar characteristics. For example, pigeon, house sparrow, crow and dove can all be generalized as Birds."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Specialization is the opposite of generalization. In specialization, a group of entities is divided into sub-groups based on their characteristics. Take a group \u2018Person\u2019 for example. A person has name, date of birth, gender, etc. These properties are common in all persons, human beings. But in a company, persons can be identified as employee, employer, customer, or vendor, based on what role they play in the company."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Similarly, in a school database, persons can be specialized as teacher, student, or a staff, based on what role they play in school as entities."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We use all the above features of ER-Model in order to create classes of objects in object-oriented programming. The details of entities are generally hidden from the user; this process known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Inheritance is an important feature of Generalization and Specialization. It allows lower-level entities to inherit the attributes of higher-level entities."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For example, the attributes of a Person class such as name, age, and gender can be inherited by lower-level entities such as Student or Teacher."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Dr Edgar F. Codd, after his extensive research on the Relational Model of database systems, came up with twelve rules of his own, which according to him, a database must obey in order to be regarded as a true relational database."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "These rules can be applied on any database system that manages stored data using only its relational capabilities. This is a foundation rule, which acts as a base for all the other rules."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The data stored in a database, may it be user data or metadata, must be a value of some table cell. Everything in a database must be stored in a table format."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Every single data element (value) is guaranteed to be accessible logically with a combination of table-name, primary-key (row value), and attribute-name (column value). No other means, such as pointers, can be used to access data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The NULL values in a database must be given a systematic and uniform treatment. This is a very important rule because a NULL can be interpreted as one the following \u2212 data is missing, data is not known, or data is not applicable."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The structure description of the entire database must be stored in an online catalog, known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database can only be accessed using a language having linear syntax that supports data definition, data manipulation, and transaction management operations. This language can be used directly or by means of some application. If the database allows access to data without any help of this language, then it is considered as a violation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "All the views of a database, which can theoretically be updated, must also be updatable by the system."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database must support high-level insertion, updation, and deletion. This must not be limited to a single row, that is, it must also support union, intersection and minus operations to yield sets of data records."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The data stored in a database must be independent of the applications that access the database. Any change in the physical structure of a database must not have any impact on how the data is being accessed by external applications."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The logical data in a database must be independent of its user\u2019s view (application). Any change in logical data must not affect the applications using it. For example, if two tables are merged or one is split into two different tables, there should be no impact or change on the user application. This is one of the most difficult rule to apply."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A database must be independent of the application that uses it. All its integrity constraints can be independently modified without the need of any change in the application. This rule makes a database independent of the front-end application and its interface."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The end-user must not be able to see that the data is distributed over various locations. Users should always get the impression that the data is located at one site only. This rule has been regarded as the foundation of distributed database systems."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If a system has an interface that provides access to low-level records, then the interface must not be able to subvert the system and bypass security and integrity constraints."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relational data model is the primary data model, which is used widely around the world for data storage and processing. This model is simple and it has all the properties and capabilities required to process data with storage efficiency."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 In relational data model, relations are saved in the format of Tables. This format stores the relation among entities. A table has rows and columns, where rows represents records and columns represent the attributes."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 A single row of a table, which contains a single record for that relation is called a tuple."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 A finite set of tuples in the relational database system represents relation instance. Relation instances do not have duplicate tuples."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 A relation schema describes the relation name (table name), attributes, and their names."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Each row has one or more attributes, known as relation key, which can identify the row in the relation (table) uniquely."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Every attribute has some pre-defined value scope, known as attribute domain."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Every relation has some conditions that must hold for it to be a valid relation.  These conditions are called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There must be at least one minimal subset of attributes in the relation, which can identify a tuple uniquely. This minimal subset of attributes is called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Key constraints force that \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Key constraints are also referred to as Entity Constraints."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Attributes have specific values in real-world scenario. For example, age can only be a positive integer. The same constraints have been tried to employ on the attributes of a relation. Every attribute is bound to have a specific range of values. For example, age cannot be less than zero and telephone numbers cannot contain a digit outside 0-9."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Referential integrity constraints work on the concept of Foreign Keys. A foreign key is a key attribute of a relation that can be referred in other relation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Referential integrity constraint states that if a relation refers to a key attribute of a different or same relation, then that key element must exist."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relational database systems are expected to be equipped with a query language that can assist its users to query the database instances. There are two kinds of query languages \u2212 relational algebra and relational calculus."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relational algebra is a procedural query language, which takes instances of relations as input and yields instances of relations as output. It uses operators to perform queries. An operator can be either "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The fundamental operations of relational algebra are as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We will discuss all these operations in the following sections."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "It selects tuples that satisfy the given predicate from a relation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 \u03c3"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Where "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Selects tuples from books where subject is 'database'."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Selects tuples from books where subject is 'database' and 'price' is 450."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Selects tuples from books where subject is 'database' and 'price' is 450 or those books published after 2010."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "It projects column(s) that satisfy a given predicate."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Notation \u2212 \u220f"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Where A"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Duplicate rows are automatically eliminated, as relation is a set."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Selects and projects columns named as subject and author from the relation Books."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "It performs binary union between two given relations and is defined as \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 r U s "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Where "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For a union operation to be valid, the following conditions must hold \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Projects the names of the authors who have either written a book or an article or both."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The result of set difference operation is tuples, which are present in one relation but are not in the second relation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Finds all the tuples that are present in "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Provides the name of authors who have written books but not articles."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Combines information of two different relations into one. "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 r \u03a7 s"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Where "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "r \u03a7  s = { q t | q \u2208  r and t \u2208 s}"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Yields a relation, which shows all the books and articles written by tutorialspoint."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The results of relational algebra are also relations but without any name. The rename operation allows us to rename the output relation. 'rename' operation is denoted with small Greek letter "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Where the result of expression "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Additional operations are \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In contrast to Relational Algebra, Relational Calculus is a non-procedural query language, that is, it tells what to do but never explains how to do it."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relational calculus exists in two forms \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Filtering variable ranges over tuples"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 {T | Condition} "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Returns all tuples T that satisfies a condition."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Returns tuples with 'name' from Author who has written article on 'database'."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "TRC can be quantified. We can use Existential (\u2203) and Universal Quantifiers (\u2200)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 The above query will yield the same result as the previous one."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In DRC, the filtering variable uses the domain of attributes instead of entire tuple values (as done in TRC, mentioned above)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "{ a"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Where a1, a2 are attributes and "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 Yields Article, Page, and Subject from the relation TutorialsPoint, where subject is database."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Just like TRC, DRC can also be written using existential and universal quantifiers.  DRC also involves relational operators."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The expression power of Tuple Relation Calculus and Domain Relation Calculus is equivalent to Relational Algebra."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "ER Model, when conceptualized into diagrams, gives a good overview of entity-relationship, which is easier to understand. ER diagrams can be mapped to relational schema, that is, it is possible to create relational schema using ER diagram. We cannot import all the ER constraints into relational model, but an approximate schema can be generated."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There are several processes and algorithms available to convert ER Diagrams into Relational Schema. Some of them are automated and some of them are manual. We may focus here on the mapping diagram contents to relational basics."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "ER diagrams mainly comprise of \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "An entity is a real-world object with some attributes."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A relationship is an association among entities."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A weak entity set is one which does not have any primary key associated with it."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "ER specialization or generalization comes in the form of hierarchical entity sets."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "SQL is a programming language for Relational Databases. It is designed over relational algebra and tuple relational calculus. SQL comes as a package with all major distributions of RDBMS."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "SQL comprises both data definition and data manipulation languages. Using the data definition properties of SQL, one can design and modify database schema, whereas data manipulation properties allows SQL to store and retrieve data from database."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "SQL uses the following set of commands to define database schema \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Creates new databases, tables and views from RDBMS."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Drops commands, views, tables, and databases from RDBMS."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "\u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Modifies database schema."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "\u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This command adds an attribute in the relation "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "SQL is equipped with data manipulation language (DML). DML modifies the database instance by inserting, updating and deleting its data. DML is responsible for all forms data modification in a database. SQL contains the following set of commands in its DML section \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "These basic constructs allow database programmers and users to enter data and information into the database and retrieve efficiently using a number of filter options."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This command will yield the names of authors from the relation "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This command is used for inserting values into the rows of a table (relation)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "\u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Or"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This command is used for updating or modifying the values of columns in a table (relation)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This command is used for removing one or more rows from a table (relation)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Functional dependency (FD) is a set of constraints between two attributes in a relation. Functional dependency says that if two tuples have same values for attributes A1, A2,..., An, then those two tuples must have to have same values for attributes B1, B2, ..., Bn."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Functional dependency is represented by an arrow sign (\u2192) that is, X\u2192Y, where X functionally determines Y. The left-hand side attributes determine the values of attributes on the right-hand side."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If F is a set of functional dependencies then the closure of F, denoted as F"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If a database design is not perfect, it may contain anomalies, which are like a bad dream for any database administrator. Managing a database with anomalies is next to impossible."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Normalization is a method to remove all these anomalies and bring the database to a consistent state."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "First Normal Form is defined in the definition of relations (tables) itself. This rule defines that all the attributes in a relation must have atomic domains. The values in an atomic domain are indivisible units."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We re-arrange the relation (table) as below, to convert it to First Normal Form."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Each attribute must contain only a single value from its pre-defined domain."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Before we learn about the second normal form, we need to understand the following \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If we follow second normal form, then every non-prime attribute should be fully functionally dependent on prime key attribute. That is, if X \u2192 A holds, then there should not be any proper subset Y of X, for which Y \u2192 A also holds true."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We see here in Student_Project relation that the prime key attributes are Stu_ID and Proj_ID. According to the rule, non-key attributes, i.e. Stu_Name and Proj_Name must be dependent upon both and not on any of the prime key attribute individually. But we find that Stu_Name can be identified by Stu_ID and Proj_Name can be identified by Proj_ID independently. This is called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We broke the relation in two as depicted in the above picture. So there exists no partial dependency."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For a relation to be in Third Normal Form, it must be in Second Normal form and the following must satisfy \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We find that in the above Student_detail relation, Stu_ID is the key and only prime key attribute. We find that City can be identified by Stu_ID as well as Zip itself.  Neither Zip is a superkey nor is City a prime attribute. Additionally, Stu_ID \u2192 Zip \u2192 City, so there exists "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "To bring this relation into third normal form, we break the relation into two relations as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Boyce-Codd Normal Form (BCNF) is an extension of Third Normal Form on strict terms. BCNF states that \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In the above image, Stu_ID is the super-key in the relation Student_Detail and Zip is the super-key in the relation ZipCodes. So,"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Stu_ID \u2192 Stu_Name, Zip"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "and"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Zip \u2192 City"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Which confirms that both the relations are in BCNF."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We understand the benefits of taking a Cartesian product of two relations, which gives us all the possible tuples that are paired together. But it might not be feasible for us in certain cases to take a Cartesian product where we encounter huge relations with thousands of tuples having a considerable large number of attributes."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " is a combination of a Cartesian product followed by a selection process. A Join operation pairs two tuples from different relations, if and only if a given join condition is satisfied."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We will briefly describe various join types in the following sections."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Theta join combines tuples from different relations provided they satisfy the theta condition. The join condition is denoted by the symbol "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "R1 and R2 are relations having attributes (A1, A2, .., An) and (B1, B2,.. ,Bn) such that the attributes don\u2019t have anything in common, that is R1 \u2229 R2 = \u03a6."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Theta join can use all kinds of comparison operators."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Student_Detail ="},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": null},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When Theta join uses only "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Natural join does not use any comparison operator. It does not concatenate the way a Cartesian product does. We can perform a Natural Join only if there is at least one common attribute that exists between two relations. In addition, the attributes must have the same name and domain."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Natural join acts on those matching attributes where the values of attributes in both the relations are same."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Theta Join, Equijoin, and Natural Join are called inner joins. An inner join includes only those tuples with matching attributes and the rest are discarded in the resulting relation. Therefore, we need to use outer joins to include all the tuples from the participating relations in the resulting relation. There are three kinds of outer joins \u2212 left outer join, right outer join, and full outer join."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "All the tuples from the Left relation, R, are included in the resulting relation. If there are tuples in R without any matching tuple in the Right relation S, then the S-attributes of the resulting relation are made NULL."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "All the tuples from the Right relation, S, are included in the resulting relation. If there are tuples in S without any matching tuple in R, then the R-attributes of resulting relation are made NULL."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "All the tuples from both participating relations are included in the resulting relation. If there are no matching tuples for both relations, their respective unmatched attributes are made NULL."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Databases are stored in file formats, which contain records. At physical level, the actual data is stored in electromagnetic format on some device. These storage devices can be broadly categorized into three types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A computer system has a well-defined hierarchy of memory. A CPU has direct access to it main memory as well as its inbuilt registers. The access time of the main memory is obviously less than the CPU speed. To minimize this speed mismatch, cache memory is introduced. Cache memory provides the fastest access time and it contains data that is most frequently accessed by the CPU."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The memory with the fastest access is the costliest one. Larger storage devices offer slow speed and they are less expensive, however they can store huge volumes of data as compared to CPU registers or cache memory."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hard disk drives are the most common secondary storage devices in present computer systems. These are called magnetic disks because they use the concept of magnetization to store information. Hard disks consist of metal disks coated with magnetizable material. These disks are placed vertically on a spindle. A read/write head moves in between the disks and is used to magnetize or de-magnetize the spot under it. A magnetized spot can be recognized as 0 (zero) or 1 (one)."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hard disks are formatted in a well-defined order to store data efficiently. A hard disk plate has many concentric circles on it, called "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "RAID stands for "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "RAID consists of an array of disks in which multiple disks are connected together to achieve different goals. RAID levels define the use of disk arrays."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Relative data and information is stored collectively in file formats. A file is a sequence of records stored in binary format. A disk drive is formatted into several blocks that can store records. File records are mapped onto those disk blocks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "File Organization defines how file records are mapped onto disk blocks. We have four types of File Organization to organize file records \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When a file is created using Heap File Organization, the Operating System allocates memory area to that file without any further accounting details. File records can be placed anywhere in that memory area. It is the responsibility of the software to manage the records. Heap File does not support any ordering, sequencing, or indexing on its own."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Every file record contains a data field (attribute) to uniquely identify that record. In sequential file organization, records are placed in the file in some sequential order based on the unique key field or search key. Practically, it is not possible to store all the records sequentially in physical form."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hash File Organization uses Hash function computation on some fields of the records. The output of the hash function determines the location of disk block where the records are to be placed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Clustered file organization is not considered good for large databases. In this mechanism, related records from one or more relations are kept in the same disk block, that is, the ordering of records is not based on primary key or search key."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Operations on database files can be broadly classified into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Update operations change the data values by insertion, deletion, or update. Retrieval operations, on the other hand, do not alter the data but retrieve them after optional conditional filtering. In both types of operations, selection plays a significant role. Other than creation and deletion of a file, there could be several operations, which can be done on files."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The organization of data inside a file plays a major role here. The process to locate the file pointer to a desired record inside a file various based on whether the records are arranged sequentially or clustered."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We know that data is stored in the form of records. Every record has a key field, which helps it to be recognized uniquely."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Indexing is a data structure technique to efficiently retrieve records from the database files based on some attributes on which the indexing has been done. Indexing in database systems is similar to what we see in books."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Indexing is defined based on its indexing attributes. Indexing can be of the following types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Ordered Indexing is of two types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In dense index, there is an index record for every search key value in the database. This makes searching faster but requires more space to store index records itself. Index records contain search key value and a pointer to the actual record on the disk."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In sparse index, index records are not created for every search key. An index record here contains a search key and an actual pointer to the data on the disk. To search a record, we first proceed by index record and reach at the actual location of the data. If the data we are looking for is not where we directly reach by following the index, then the system starts sequential search until the desired data is found."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Index records comprise search-key values and data pointers. Multilevel index is stored on the disk along with the actual database files. As the size of the database grows, so does the size of the indices. There is an immense need to keep the index records in the main memory so as to speed up the search operations. If single-level index is used, then a large size index cannot be kept in memory which leads to multiple disk accesses."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Multi-level Index helps in breaking down the index into several smaller indices in order to make the outermost level so small that it can be saved in a single disk block, which can easily be accommodated anywhere in the main memory."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A B"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Every leaf node is at equal distance from the root node. A B"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For a huge database structure, it can be almost next to impossible to search all the index values through all its level and then reach the destination data block to retrieve the desired data. Hashing is an effective technique to calculate the direct location of a data record on the disk without using index structure."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hashing uses hash functions with search keys as parameters to generate the address of a data record."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In static hashing, when a search-key value is provided, the hash function always computes the same address. For example, if mod-4 hash function is used, then it shall generate only 5 values. The output address shall always be same for that function. The number of buckets provided remains unchanged at all times."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The condition of bucket-overflow is known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The problem with static hashing is that it does not expand or shrink dynamically as the size of the database grows or shrinks. Dynamic hashing provides a mechanism in which data buckets are added and removed dynamically and on-demand. Dynamic hashing is also known as "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hash function, in dynamic hashing, is made to produce a large number of values and only a few are used initially."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The prefix of an entire hash value is taken as a hash index. Only a portion of the hash value is used for computing bucket addresses. Every hash index has a depth value to signify how many bits are used for computing a hash function. These bits can address 2n buckets. When all these bits are consumed \u2212 that is, when all the buckets are full \u2212 then the depth value is increased linearly and twice the buckets are allocated."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hashing is not favorable when the data is organized in some ordering and the queries require a range of data. When data is discrete and random, hash performs the best."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Hashing algorithms have high complexity than indexing. All hash operations are done in constant time."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A transaction can be defined as a group of tasks. A single task is the minimum processing unit which cannot be divided further."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Let\u2019s take an example of a simple transaction. Suppose a bank employee transfers Rs 500 from A's account to B's account. This very simple and small transaction involves several low-level tasks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": null},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": null},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A transaction is a very small unit of a program and it may contain several lowlevel tasks. A transaction in a database system must maintain "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When multiple transactions are being executed by the operating system in a multiprogramming environment, there are possibilities that instructions of one transactions are interleaved with some other transaction."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In a multi-transaction environment, serial schedules are considered as a benchmark. The execution sequence of an instruction in a transaction cannot be changed, but two transactions can have their instructions executed in a random fashion. This execution does no harm if two transactions are mutually independent and working on different segments of data; but in case these two transactions are working on the same data, then the results may vary. This ever-varying result may bring the database to an inconsistent state."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "To resolve this problem, we allow parallel execution of a transaction schedule, if its transactions are either serializable or have some equivalence relation among them."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "An equivalence schedule can be of the following types \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "If two schedules produce the same result after execution, they are said to be result equivalent. They may yield the same result for some value and different results for another set of values. That's why this equivalence is not generally considered significant."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Two schedules would be view equivalence if the transactions in both the schedules perform similar actions in a similar manner."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For example \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Two schedules would be conflicting if they have the following properties \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Two schedules having multiple transactions with conflicting operations are said to be conflict equivalent if and only if \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": " \u2212 View equivalent schedules are view serializable and conflict equivalent schedules are conflict serializable. All conflict serializable schedules are view serializable too."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A transaction in a database can be in one of the following states \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In a multiprogramming environment where multiple transactions can be executed simultaneously, it is highly important to control the concurrency of transactions. We have concurrency control protocols to ensure atomicity, isolation, and serializability of concurrent transactions. Concurrency control protocols can be broadly divided into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Database systems equipped with lock-based protocols use a mechanism by which any transaction cannot read or write data until it acquires an appropriate lock on it. Locks are of two kinds \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There are four types of lock protocols available \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Simplistic lock-based protocols allow transactions to obtain a lock on every object before a 'write' operation is performed. Transactions may unlock the data item after completing the \u2018write\u2019 operation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Pre-claiming protocols evaluate their operations and create a list of data items on which they need locks. Before initiating an execution, the transaction requests the system for all the locks it needs beforehand. If all the locks are granted, the transaction executes and releases all the locks when all its operations are over. If all the locks are not granted, the transaction rolls back and waits until all the locks are granted."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This locking protocol divides the execution phase of a transaction into three parts. In the first part, when the transaction starts executing, it seeks permission for the locks it requires. The second part is where the transaction acquires all the locks. As soon as the transaction releases its first lock, the third phase starts. In this phase, the transaction cannot demand any new locks; it only releases the acquired locks."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Two-phase locking has two phases, one is "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "To claim an exclusive (write) lock, a transaction must first acquire a shared (read) lock and then upgrade it to an exclusive lock."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The first phase of Strict-2PL is same as 2PL. After acquiring all the locks in the first phase, the transaction continues to execute normally. But in contrast to 2PL, Strict-2PL does not release a lock after using it. Strict-2PL holds all the locks until the commit point and releases all the locks at a time."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Strict-2PL does not have cascading abort as 2PL does."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The most commonly used concurrency protocol is the timestamp based protocol. This protocol uses either system time or logical counter as a timestamp."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Lock-based protocols manage the order between the conflicting pairs among transactions at the time of execution, whereas timestamp-based protocols start working as soon as a transaction is created."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Every transaction has a timestamp associated with it, and the ordering is determined by the age of the transaction. A transaction created at 0002 clock time would be older than all other transactions that come after it. For example, any transaction 'y' entering the system at 0004 is two seconds younger and the priority would be given to the older one."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In addition, every data item is given the latest read and write-timestamp. This lets the system know when the last \u2018read and write\u2019 operation was performed on the data item."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The timestamp-ordering protocol ensures serializability among transactions in their conflicting read and write operations. This is the responsibility of the protocol system that the conflicting pair of tasks should be executed according to the timestamp values of the transactions."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Timestamp ordering protocol works as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This rule states if TS(Ti) < W-timestamp(X), then the operation is rejected and T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Time-stamp ordering rules can be modified to make the schedule view serializable."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Instead of making T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In a multi-process system, deadlock is an unwanted situation that arises in a shared resource environment, where a process indefinitely waits for a resource that is held by another process."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "For example, assume a set of transactions {T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Deadlocks are not healthy for a system. In case a system is stuck in a deadlock, the transactions involved in the deadlock are either rolled back or restarted."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "To prevent any deadlock situation in the system, the DBMS aggressively inspects all the operations, where transactions are about to execute. The DBMS inspects the operations and analyzes if they can create a deadlock situation. If it finds that a deadlock situation might occur, then that transaction is never allowed to be executed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There are deadlock prevention schemes that use timestamp ordering mechanism of transactions in order to predetermine a deadlock situation."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In this scheme, if a transaction requests to lock a resource (data item), which is already held with a conflicting lock by another transaction, then one of the two possibilities may occur \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This scheme allows the older transaction to wait but kills the younger one."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In this scheme, if a transaction requests to lock a resource (data item), which is already held with conflicting lock by some another transaction, one of the two possibilities may occur \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This scheme, allows the younger transaction to wait; but when an older transaction requests an item held by a younger one, the older transaction forces the younger one to abort and release the item."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In both the cases, the transaction that enters the system at a later stage is aborted."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Aborting a transaction is not always a practical approach. Instead, deadlock avoidance mechanisms can be used to detect any deadlock situation in advance. Methods like \"wait-for graph\" are available but they are suitable for only those systems where transactions are lightweight having fewer instances of resource. In a bulky system, deadlock prevention techniques may work well."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "This is a simple method available to track if any deadlock situation may arise. For each transaction entering into the system, a node is created. When a transaction T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The system maintains this wait-for graph for every transaction waiting for some data items held by others. The system keeps checking if there's any cycle in the graph."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Here, we can use any of the two following approaches \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A volatile storage like RAM stores all the active logs, disk buffers, and related data. In addition, it stores all the transactions that are being currently executed. What happens if such a volatile storage crashes abruptly? It would obviously take away all the logs and active copies of the database. It makes recovery almost impossible, as everything that is required to recover the data is lost."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Following techniques may be adopted in case of loss of volatile storage \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A catastrophic failure is one where a stable, secondary storage device gets corrupt. With the storage device, all the valuable data that is stored inside is lost. We have two different strategies to recover data from such a catastrophic failure \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Grown-up databases are too bulky to be frequently backed up. In such cases, we have techniques where we can restore a database just by looking at its logs. So, all that we need to do here is to take a backup of all the logs at frequent intervals of time. The database can be backed up once a week, and the logs being very small can be backed up every day or as frequently as possible."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Remote backup provides a sense of security in case the primary location where the database is located gets destroyed. Remote backup can be offline or real-time or online. In case it is offline, it is maintained manually."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Online backup systems are more real-time and lifesavers for database administrators and investors. An online backup system is a mechanism where every bit of the real-time data is backed up simultaneously at two distant places. One of them is directly connected to the system and the other one is kept at a remote place as backup."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "As soon as the primary database storage fails, the backup system senses the failure and switches the user system to the remote storage. Sometimes this is so instant that the users can\u2019t even realize a failure."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "DBMS is a highly complex system with hundreds of transactions being executed every second. The durability and robustness of a DBMS depends on its complex architecture and its underlying hardware and system software. If it fails or crashes amid transactions, it is expected that the system would follow some sort of algorithm or techniques to recover lost data."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "To see where the problem has occurred, we generalize a failure into various categories, as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "A transaction has to abort when it fails to execute or when it reaches a point from where it can\u2019t go any further. This is called transaction failure where only a few transactions or processes are hurt."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Reasons for a transaction failure could be \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There are problems \u2212 external to the system \u2212 that may cause the system to stop abruptly and cause the system to crash. For example, interruptions in power supply may cause the failure of underlying hardware or software failure."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Examples may include operating system errors."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "In early days of technology evolution, it was a common problem where hard-disk drives or storage drives used to fail frequently."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Disk failures include formation of bad sectors, unreachability to the disk, disk head crash or any other failure, which destroys all or a part of disk storage."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "We have already described the storage system. In brief, the storage structure can be divided into two categories \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When a system crashes, it may have several transactions being executed and various files opened for them to modify the data items. Transactions are made of various operations, which are atomic in nature. But according to ACID properties of DBMS, atomicity of transactions as a whole must be maintained, that is, either all the operations are executed or none."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When a DBMS recovers from a crash, it should maintain the following \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "There are two types of techniques, which can help a DBMS in recovering as well as maintaining the atomicity of a transaction \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Log is a sequence of records, which maintains the records of actions performed by a transaction. It is important that the logs are written prior to the actual modification and stored on a stable storage media, which is failsafe."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Log-based recovery works as follows \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "It reads T"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "The database can be modified using two approaches \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When more than one transaction are being executed in parallel, the logs are interleaved. At the time of recovery, it would become hard for the recovery system to backtrack all logs, and then start recovering. To ease this situation, most modern DBMS use the concept of 'checkpoints'."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "Keeping and maintaining logs in real time and in real environment may fill out all the memory space available in the system. As time passes, the log file may grow too big to be handled at all. Checkpoint is a mechanism where all the previous logs are removed from the system and stored permanently in a storage disk. Checkpoint declares a point before which the DBMS was in consistent state, and all the transactions were committed."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "When a system with concurrent transactions crashes and recovers, it behaves in the following manner \u2212"},
{"page": "https://www.tutorialspoint.com/dbms/dbms_quick_guide.htm", "content": "All the transactions in the undo-list are then undone and their logs are removed. All the transactions in the redo-list and their previous logs are removed and then redone before saving their logs."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_useful_resources.htm", "content": "The following resources contain additional information on DBMS. Please use them to get more in-depth knowledge on this topic."},
{"page": "https://www.tutorialspoint.com/dbms/dbms_useful_resources.htm", "content": "To enlist your site on this page, please drop an email to "},
{"page": "https://www.tutorialspoint.com/dbms/dbms_discussion.htm", "content": "Database Management System or DBMS in short refers to the technology of storing and retrieving users\u2019 data with utmost efficiency along with appropriate security measures. This tutorial explains the basics of DBMS such as its architecture, data models, data schemas, data independence, E-R model, relation model, relational database design, and storage and file structure and much more."}
]